import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { PrismaService } from '../prisma/prisma.service';
import { NotificationsService } from '../notifications/notifications.service';

@Injectable()
export class RemindersService {
  private readonly logger = new Logger(RemindersService.name);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
  private readonly FIRST_REMINDER_HOURS = parseInt(process.env.FIRST_REMINDER_HOURS || '3', 10); // –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
  private readonly REMINDER_INTERVAL_HOURS = parseInt(process.env.REMINDER_INTERVAL_HOURS || '3', 10); // –ü–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
  private readonly MODERN_REMINDER_DAYS = parseInt(process.env.MODERN_REMINDER_DAYS || '3', 10);

  constructor(
    private prisma: PrismaService,
    private notificationsService: NotificationsService,
  ) {}

  /**
   * –ö–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å
   * –°—Ç–∞—Ç—É—Å—ã: "–ü—Ä–∏–Ω—è–ª", "–í –ø—É—Ç–∏", "–í —Ä–∞–±–æ—Ç–µ"
   * 
   * –õ–æ–≥–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
   * - –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –ø–æ—Å–ª–µ dateMeeting (13:00 –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –≤ 10:00)
   * - –ü–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞: 16:00, 19:00, 22:00, –∏ —Ç.–¥.
   * - –ü–æ–∫–∞ –º–∞—Å—Ç–µ—Ä –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç –∑–∞–∫–∞–∑
   */
  @Cron(CronExpression.EVERY_HOUR)
  async checkOrdersToClose() {
    this.logger.log('üîç Checking orders that need to be closed...');

    try {
      const now = new Date();
      const firstReminderThreshold = new Date(now.getTime() - this.FIRST_REMINDER_HOURS * 60 * 60 * 1000);

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏
      const orders = await this.prisma.order.findMany({
        where: {
          statusOrder: {
            in: ['–ü—Ä–∏–Ω—è–ª', '–í –ø—É—Ç–∏', '–í —Ä–∞–±–æ—Ç–µ'],
          },
          dateMeeting: {
            lte: firstReminderThreshold, // –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –±—ã–ª–∞ 3+ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
          },
          masterId: {
            not: null,
          },
        },
        include: {
          master: true,
        },
      });

      this.logger.log(`Found ${orders.length} orders to check for close reminders`);

      for (const order of orders) {
        if (!order.master || !order.master.chatId) {
          continue;
        }

        // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø—Ä–æ—à–ª–æ —Å –¥–∞—Ç—ã –≤—Å—Ç—Ä–µ—á–∏
        const hoursSinceMeeting = Math.floor(
          (now.getTime() - order.dateMeeting.getTime()) / (1000 * 60 * 60)
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 3+ —á–∞—Å–∞ (–∫—Ä–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–π —á–∞—Å)
        if (hoursSinceMeeting >= this.FIRST_REMINDER_HOURS) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
          await this.notificationsService.sendCloseOrderReminderNotification({
            orderId: order.id,
            masterId: order.masterId!,
            clientName: order.clientName,
            daysOverdue: Math.floor(hoursSinceMeeting / 24),
          });

          this.logger.log(`‚úÖ Sent close reminder for order ${order.id} to master ${order.master.name} (${hoursSinceMeeting}h overdue)`);
        }
      }
    } catch (error) {
      this.logger.error(`Error checking orders to close: ${error.message}`);
    }
  }

  /**
   * –†–∞–∑ –≤ –¥–µ–Ω—å –≤ 10:00 –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –º–æ–¥–µ—Ä–Ω–µ
   * 
   * –õ–æ–≥–∏–∫–∞:
   * –í–ê–†–ò–ê–ù–¢ –ê (–Ω–µ—Ç dateClosmod):
   *   - –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ç—É—Å–∞ "–ú–æ–¥–µ—Ä–Ω"
   *   - –ü–æ—Ç–æ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
   * 
   * –í–ê–†–ò–ê–ù–¢ –ë (–µ—Å—Ç—å dateClosmod):
   *   - –í –¥–µ–Ω—å dateClosmod –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
   *   - –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –¥–∞—Ç–∞ –∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç ‚Üí –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ
   */
  @Cron('0 10 * * *') // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
  async checkModernOrders() {
    this.logger.log('üîç Checking orders in modern status...');

    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "–ú–æ–¥–µ—Ä–Ω"
      const orders = await this.prisma.order.findMany({
        where: {
          statusOrder: '–ú–æ–¥–µ—Ä–Ω',
          masterId: {
            not: null,
          },
        },
        include: {
          master: true,
        },
      });

      this.logger.log(`Found ${orders.length} orders in modern status`);

      for (const order of orders) {
        if (!order.master || !order.master.chatId) {
          continue;
        }

        let shouldSendReminder = false;
        let daysUntilClosing = 0;
        let isOverdue = false;

        // –°–ª—É—á–∞–π 1: –ï—Å—Ç—å –¥–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–µ—Ä–Ω–∞
        if (order.dateClosmod) {
          const closingDate = new Date(order.dateClosmod);
          closingDate.setHours(0, 0, 0, 0);

          // –í –¥–µ–Ω—å –∑–∞–∫—Ä—ã—Ç–∏—è –∏–ª–∏ –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
          if (closingDate <= today) {
            shouldSendReminder = true;
            
            if (closingDate.getTime() === today.getTime()) {
              daysUntilClosing = 0;
              this.logger.debug(`Order ${order.id}: Closing date is today`);
            } else {
              daysUntilClosing = Math.floor(
                (today.getTime() - closingDate.getTime()) / (1000 * 60 * 60 * 24)
              );
              isOverdue = true;
              this.logger.debug(`Order ${order.id}: Overdue by ${daysUntilClosing} days`);
            }
          }
        } else {
          // –°–ª—É—á–∞–π 2: –ù–µ—Ç –¥–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–∏—è - –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 3+ –¥–Ω—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const orderDate = new Date(order.updatedAt);
          orderDate.setHours(0, 0, 0, 0);
          
          const daysSinceOrderUpdate = Math.floor(
            (today.getTime() - orderDate.getTime()) / (1000 * 60 * 60 * 24)
          );

          if (daysSinceOrderUpdate >= this.MODERN_REMINDER_DAYS) {
            shouldSendReminder = true;
            daysUntilClosing = 0;
            this.logger.debug(`Order ${order.id}: Daily reminder (${daysSinceOrderUpdate} days since update)`);
          }
        }

        if (shouldSendReminder) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
          await this.notificationsService.sendModernClosingReminderNotification({
            orderId: order.id,
            masterId: order.masterId!,
            clientName: order.clientName,
            expectedClosingDate: order.dateClosmod 
              ? new Date(order.dateClosmod).toLocaleDateString('ru-RU')
              : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            daysUntilClosing: isOverdue ? -daysUntilClosing : daysUntilClosing,
          });

          this.logger.log(
            `‚úÖ Sent modern reminder for order ${order.id} to master ${order.master.name}` +
            (isOverdue ? ` (overdue by ${daysUntilClosing} days)` : '')
          );
        }
      }
    } catch (error) {
      this.logger.error(`Error checking modern orders: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ API)
   */
  async testReminders() {
    this.logger.log('üß™ Testing reminder jobs manually...');
    await this.checkOrdersToClose();
    await this.checkModernOrders();
    return { success: true, message: 'Reminder jobs executed' };
  }
}

